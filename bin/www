#!/usr/bin/env node

/**
 * Module dependencies.
 */
console.log("www pid", process.pid);

const path = require("path");
const dotenv = require("dotenv");
// Если запуск как сервиса, то текущая папка процесса - корень системы
if (process.cwd() === "/") {
    const pathToenv = path.resolve(__dirname, '../.env');
    console.log("env path", pathToenv);
    console.log("process.cwd()", process.cwd());
    dotenv.config({ path: pathToenv });
    console.log("DB_LOGIN", process.env.DB_LOGIN);
} else {
    console.log("load default env");
    console.log("process.cwd()", process.cwd());
    const pathToenv = path.resolve(__dirname, '../.env');
    console.log("env path", pathToenv);
    dotenv.config();

    console.log("DB_LOGIN", process.env.DB_LOGIN);
}

const os = require("os");
const app = require('../dist/app');
const debug = require('debug')('webcustomprint:server');
const http = require('http');

/*
const stdin = process.openStdin();

stdin.addListener("data", (d) => {
    // note:  d is an object, and when converted to a string it will
    // end with a linefeed.  so we (rather crudely) account for that
    // with toString() and then trim()
    console.log("you entered: [" +
        d.toString().trim() + "]");
});*/



// const usbDetect = require('usb-detection');

const scanerSingleton = require('../dist/prodUtils').Singleton.getInstance();
console.log("scanerSingleton", scanerSingleton);
// import { Singleton } from "../dist/prodUtils";

console.log("starting... with username", os.userInfo().username);
if (process.env.SILENCE === "1") {
    console.log("SILENCE mode");
}
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port1 = parseInt(val, 10);

    if (isNaN(port1)) {
        // named pipe
        return val;
    }

    if (port1 >= 0) {
        // port number
        return port1;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}


const gracefulShutdownHandler = (signal) => {
    console.log(`⚠️ Caught ${signal}, gracefully shutting down`);
    HEALTH_CHECK_ENABLED = false;

    setTimeout(() => {
        console.log('🤞 Shutting down application');
        // stop the server from accepting new connections
        server.close(() => {
            console.log('👋 All requests stopped, shutting down');
            // once the server is not accepting connections, exit
            process.exit();
        });
    }, 0);
};

// The SIGINT signal is sent to a process by its controlling terminal when a user wishes to interrupt the process.
process.on('SIGINT', gracefulShutdownHandler);

// The SIGTERM signal is sent to a process to request its termination.
process.on('SIGTERM', gracefulShutdownHandler);