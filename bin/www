#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../dist/app');
const debug = require('debug')('webcustomprint:server');
const http = require('http');

// const usbDetect = require('usb-detection');

const scanner = require('../dist/scanner');

console.log("starting...");
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port1 = parseInt(val, 10);

    if (isNaN(port1)) {
        // named pipe
        return val;
    }

    if (port1 >= 0) {
        // port number
        return port1;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

/*
//  Detect scanner 05f9:4204
usbDetect.startMonitoring();

usbDetect.on('add:1529:16900', function(device) {
    console.log('adding');
    console.log('add', device);
    usbDetect.find(0x05f9, 0x4204, function(err, devices) {
        console.log('find', devices, err);
    });
});

usbDetect.on('remove:1529:16900', function(device) {
    console.log('removing');
    console.log('remove', device);
});

usbDetect.find(0x05f9, 0x4204, function(err, devices) {
    console.log('find', devices, err);
});
*/
const scannerWorker = new scanner();
scannerWorker.Init();